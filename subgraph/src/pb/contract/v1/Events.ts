// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Sei_Approval } from "./Sei_Approval";
import { Sei_Transfer } from "./Sei_Transfer";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const seiApprovals = message.seiApprovals;
    for (let i: i32 = 0; i < seiApprovals.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Sei_Approval.encode(seiApprovals[i], writer);
      writer.ldelim();
    }

    const seiTransfers = message.seiTransfers;
    for (let i: i32 = 0; i < seiTransfers.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Sei_Transfer.encode(seiTransfers[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.seiApprovals.push(
            Sei_Approval.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.seiTransfers.push(
            Sei_Transfer.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  seiApprovals: Array<Sei_Approval>;
  seiTransfers: Array<Sei_Transfer>;

  constructor(
    seiApprovals: Array<Sei_Approval> = [],
    seiTransfers: Array<Sei_Transfer> = []
  ) {
    this.seiApprovals = seiApprovals;
    this.seiTransfers = seiTransfers;
  }
}
